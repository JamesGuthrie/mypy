# Stubs for logging (Python 3.4)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Undefined, Any

CRITICAL = Undefined(Any)
FATAL = Undefined(Any)
ERROR = Undefined(Any)
WARNING = Undefined(Any)
WARN = Undefined(Any)
INFO = Undefined(Any)
DEBUG = Undefined(Any)
NOTSET = Undefined(Any)

def getLevelName(level): ...
def addLevelName(level, levelName): ...

class LogRecord:
    name = Undefined(Any)
    msg = Undefined(Any)
    args = Undefined(Any)
    levelname = Undefined(Any)
    levelno = Undefined(Any)
    pathname = Undefined(Any)
    filename = Undefined(Any)
    module = Undefined(Any)
    exc_info = Undefined(Any)
    exc_text = Undefined(Any)
    stack_info = Undefined(Any)
    lineno = Undefined(Any)
    funcName = Undefined(Any)
    created = Undefined(Any)
    msecs = Undefined(Any)
    relativeCreated = Undefined(Any)
    thread = Undefined(Any)
    threadName = Undefined(Any)
    processName = Undefined(Any)
    process = Undefined(Any)
    def __init__(self, name, level, pathname, lineno, msg, args, exc_info, func=None, sinfo=None,
                 **kwargs): ...
    def getMessage(self): ...

def setLogRecordFactory(factory): ...
def getLogRecordFactory(): ...
def makeLogRecord(dict): ...

class PercentStyle:
    default_format = Undefined(Any)
    asctime_format = Undefined(Any)
    asctime_search = Undefined(Any)
    def __init__(self, fmt): ...
    def usesTime(self): ...
    def format(self, record): ...

class StrFormatStyle(PercentStyle):
    default_format = Undefined(Any)
    asctime_format = Undefined(Any)
    asctime_search = Undefined(Any)
    def format(self, record): ...

class StringTemplateStyle(PercentStyle):
    default_format = Undefined(Any)
    asctime_format = Undefined(Any)
    asctime_search = Undefined(Any)
    def __init__(self, fmt): ...
    def usesTime(self): ...
    def format(self, record): ...

BASIC_FORMAT = Undefined(Any)

class Formatter:
    converter = Undefined(Any)
    datefmt = Undefined(Any)
    def __init__(self, fmt=None, datefmt=None, style=''): ...
    default_time_format = Undefined(Any)
    default_msec_format = Undefined(Any)
    def formatTime(self, record, datefmt=None): ...
    def formatException(self, ei): ...
    def usesTime(self): ...
    def formatMessage(self, record): ...
    def formatStack(self, stack_info): ...
    def format(self, record): ...

class BufferingFormatter:
    linefmt = Undefined(Any)
    def __init__(self, linefmt=None): ...
    def formatHeader(self, records): ...
    def formatFooter(self, records): ...
    def format(self, records): ...

class Filter:
    name = Undefined(Any)
    nlen = Undefined(Any)
    def __init__(self, name=''): ...
    def filter(self, record): ...

class Filterer:
    filters = Undefined(Any)
    def __init__(self): ...
    def addFilter(self, filter): ...
    def removeFilter(self, filter): ...
    def filter(self, record): ...

class Handler(Filterer):
    level = Undefined(Any)
    formatter = Undefined(Any)
    def __init__(self, level=Undefined): ...
    def get_name(self): ...
    def set_name(self, name): ...
    name = Undefined(Any)
    lock = Undefined(Any)
    def createLock(self): ...
    def acquire(self): ...
    def release(self): ...
    def setLevel(self, level): ...
    def format(self, record): ...
    def emit(self, record): ...
    def handle(self, record): ...
    def setFormatter(self, fmt): ...
    def flush(self): ...
    def close(self): ...
    def handleError(self, record): ...

class StreamHandler(Handler):
    terminator = Undefined(Any)
    stream = Undefined(Any)
    def __init__(self, stream=None): ...
    def flush(self): ...
    def emit(self, record): ...

class FileHandler(StreamHandler):
    baseFilename = Undefined(Any)
    mode = Undefined(Any)
    encoding = Undefined(Any)
    delay = Undefined(Any)
    stream = Undefined(Any)
    def __init__(self, filename, mode='', encoding=None, delay=False): ...
    def close(self): ...
    def emit(self, record): ...

class _StderrHandler(StreamHandler):
    def __init__(self, level=Undefined): ...

lastResort = Undefined(Any)

class PlaceHolder:
    loggerMap = Undefined(Any)
    def __init__(self, alogger): ...
    def append(self, alogger): ...

def setLoggerClass(klass): ...
def getLoggerClass(): ...

class Manager:
    root = Undefined(Any)
    disable = Undefined(Any)
    emittedNoHandlerWarning = Undefined(Any)
    loggerDict = Undefined(Any)
    loggerClass = Undefined(Any)
    logRecordFactory = Undefined(Any)
    def __init__(self, rootnode): ...
    def getLogger(self, name): ...
    def setLoggerClass(self, klass): ...
    def setLogRecordFactory(self, factory): ...

class Logger(Filterer):
    name = Undefined(Any)
    level = Undefined(Any)
    parent = Undefined(Any)
    propagate = Undefined(Any)
    handlers = Undefined(Any)
    disabled = Undefined(Any)
    def __init__(self, name, level=Undefined): ...
    def setLevel(self, level): ...
    def debug(self, msg, *args, **kwargs): ...
    def info(self, msg, *args, **kwargs): ...
    def warning(self, msg, *args, **kwargs): ...
    def warn(self, msg, *args, **kwargs): ...
    def error(self, msg, *args, **kwargs): ...
    def exception(self, msg, *args, **kwargs): ...
    def critical(self, msg, *args, **kwargs): ...
    fatal = Undefined(Any)
    def log(self, level, msg, *args, **kwargs): ...
    def findCaller(self, stack_info=False): ...
    def makeRecord(self, name, level, fn, lno, msg, args, exc_info, func=None, extra=None,
                   sinfo=None): ...
    def handle(self, record): ...
    def addHandler(self, hdlr): ...
    def removeHandler(self, hdlr): ...
    def hasHandlers(self): ...
    def callHandlers(self, record): ...
    def getEffectiveLevel(self): ...
    def isEnabledFor(self, level): ...
    def getChild(self, suffix): ...

class RootLogger(Logger):
    def __init__(self, level): ...

class LoggerAdapter:
    logger = Undefined(Any)
    extra = Undefined(Any)
    def __init__(self, logger, extra): ...
    def process(self, msg, kwargs): ...
    def debug(self, msg, *args, **kwargs): ...
    def info(self, msg, *args, **kwargs): ...
    def warning(self, msg, *args, **kwargs): ...
    def warn(self, msg, *args, **kwargs): ...
    def error(self, msg, *args, **kwargs): ...
    def exception(self, msg, *args, **kwargs): ...
    def critical(self, msg, *args, **kwargs): ...
    def log(self, level, msg, *args, **kwargs): ...
    def isEnabledFor(self, level): ...
    def setLevel(self, level): ...
    def getEffectiveLevel(self): ...
    def hasHandlers(self): ...

def basicConfig(**kwargs): ...
def getLogger(name=None): ...
def critical(msg, *args, **kwargs): ...

fatal = Undefined(Any)

def error(msg, *args, **kwargs): ...
def exception(msg, *args, **kwargs): ...
def warning(msg, *args, **kwargs): ...
def warn(msg, *args, **kwargs): ...
def info(msg, *args, **kwargs): ...
def debug(msg, *args, **kwargs): ...
def log(level, msg, *args, **kwargs): ...
def disable(level): ...

class NullHandler(Handler):
    def handle(self, record): ...
    def emit(self, record): ...
    lock = Undefined(Any)
    def createLock(self): ...

def captureWarnings(capture): ...
